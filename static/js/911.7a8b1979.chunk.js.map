{"version":3,"file":"static/js/911.7a8b1979.chunk.js","mappings":"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","sources":["components/Actions.tsx","components/EditableCell.tsx","components/columnOperation.tsx","pages/Events/Events.tsx","utils/helpers/parseDate.ts","utils/helpers/sortDate.ts"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\nimport { Button, Flex } from \"antd\";\n\nimport \"../styles/components/_actions.scss\";\n\ntype Props = {\n  buttonName: string;\n};\n\nconst Actions = ({ buttonName }: Props) => {\n  const navigate = useNavigate();\n  const onCreateNew = () => {\n    navigate(\"edit\");\n  };\n  return (\n    <>\n      <Flex justify=\"flex-end\">\n        <Button\n          type=\"primary\"\n          className=\"create-new-btn\"\n          size=\"large\"\n          onClick={onCreateNew}\n        >\n          {buttonName}\n        </Button>\n      </Flex>\n    </>\n  );\n};\n\nexport default Actions;\n","import { Form, Input } from \"antd\";\nimport { NewsItemType } from \"types/newsItem\";\n\ninterface EditableCellProps<T> extends React.HTMLAttributes<HTMLElement> {\n  editing: boolean;\n  dataIndex: string;\n  title: any;\n  inputType: \"date\" | \"text\";\n  record: T;\n  index: number;\n  children: React.ReactNode;\n}\n\nexport const EditableCell: React.FC<EditableCellProps<NewsItemType>> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = <Input />;\n\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Введіть ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n","import { Popconfirm, Typography } from \"antd\";\n\ninterface EntityWithId {\n  id: string;\n}\n\nexport interface ColumnOperationT<T> {\n  title: string;\n  dataIndex: string;\n  editable: boolean;\n  render: (_: any, record: T) => JSX.Element;\n}\n\ninterface ColumnOperationProps<T> {\n  editingKey: string;\n  isEditing: (record: T) => boolean;\n  save: (id: string) => Promise<void>;\n  cancel: () => void;\n  edit: (record: Partial<T>) => void;\n  deleteItem: (record: T) => void;\n}\n\nexport const columnOperation = <T extends EntityWithId>({\n  editingKey,\n  isEditing,\n  save,\n  cancel,\n  edit,\n  deleteItem,\n}: ColumnOperationProps<T>): ColumnOperationT<T> => {\n  return {\n    title: \"Дії\",\n    dataIndex: \"operation\",\n    editable: false,\n    render: (_, record): JSX.Element => {\n      const editable = isEditing(record);\n      return (\n        <>\n          {editable ? (\n            <span>\n              <Typography.Link\n                onClick={() => save(record.id)}\n                style={{ marginRight: 8 }}\n              >\n                Зберегти\n              </Typography.Link>\n              <Popconfirm\n                title=\"Ви впевнені, що хочете скасувати?\"\n                onConfirm={cancel}\n              >\n                <Typography.Link style={{ marginRight: 8 }}>\n                  Скасувати\n                </Typography.Link>\n              </Popconfirm>\n            </span>\n          ) : (\n            <Typography.Link\n              disabled={editingKey !== \"\"}\n              onClick={() => edit(record)}\n              className=\"edit-btn\"\n            >\n              Редагувати\n            </Typography.Link>\n          )}\n          <Typography.Link\n            disabled={editingKey !== \"\"}\n            onClick={() => deleteItem(record)}\n            className=\"delete-btn\"\n          >\n            Видалити\n          </Typography.Link>\n        </>\n      );\n    },\n  };\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { Form, Layout, Table } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Title from \"antd/es/typography/Title\";\n\nimport { sortDate } from \"../../utils/helpers\";\nimport { EventsItemType } from \"../../types/eventsItem\";\nimport { AppDispatch, RootState } from \"../../state/store\";\nimport { setUpdate } from \"../../state/news/newsSlice\";\nimport {\n  deleteEvent,\n  editEvent,\n  fetchEvents,\n} from \"state/events/eventsOperations\";\n\nimport Actions from \"components/Actions\";\nimport { columnOperation } from \"components/columnOperation\";\nimport { EditableCell } from \"components/EditableCell\";\n\nimport \"./styles/_events.scss\";\n\ntype Props = {};\n\nconst Events = (props: Props) => {\n  const [form] = Form.useForm();\n  const [editingKey, setEditingKey] = useState(\"\");\n  const data = useSelector((state: RootState) => state.events);\n\n  const dispatch = useDispatch<AppDispatch>();\n\n  useEffect(() => {\n    if (data.needUpdate) {\n      dispatch(fetchEvents());\n    } else {\n      dispatch(setUpdate(true));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isEditing = (record: EventsItemType) => record.id === editingKey;\n\n  const edit = (record: Partial<EventsItemType>) => {\n    form.setFieldsValue({\n      name: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      type: \"\",\n      orientation: \"\",\n      ageRestrictions: \"\",\n      venue: \"\",\n      financialFeatures: \"\",\n      ...record,\n    });\n    setEditingKey(record.id as string);\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  };\n\n  const save = async (id: string) => {\n    try {\n      const row = (await form.validateFields()) as EventsItemType;\n      const item = data.items.find((item) => item.id === id);\n      dispatch(editEvent({ ...item, ...row, id }));\n      setEditingKey(\"\");\n    } catch (errInfo) {\n      console.log(\"Validate Failed:\", errInfo);\n    }\n  };\n\n  const deleteItem = (record: EventsItemType) => {\n    dispatch(deleteEvent(record.id));\n  };\n\n  const columns = [\n    {\n      title: \"Подія\",\n      dataIndex: \"name\",\n      width: \"15%\",\n      editable: true,\n    },\n    {\n      title: \"Тип\",\n      dataIndex: \"type\",\n      width: \"10%\",\n      editable: true,\n    },\n    {\n      title: \"Орієнтація\",\n      dataIndex: \"orientation\",\n      width: \"10%\",\n      editable: true,\n    },\n    {\n      title: \"Вікові обмеження\",\n      dataIndex: \"ageRestrictions\",\n      width: \"10%\",\n      editable: true,\n    },\n    {\n      title: \"Місце проведення\",\n      dataIndex: \"venue\",\n      width: \"10%\",\n      editable: true,\n    },\n    {\n      title: \"Фінансові особливості\",\n      dataIndex: \"financialFeatures\",\n      width: \"10%\",\n      editable: true,\n    },\n    {\n      title: \"Дата початку\",\n      dataIndex: \"startDate\",\n      width: \"10%\",\n      editable: false,\n      sorter: (a: EventsItemType, b: EventsItemType) =>\n        sortDate(a.startDate, b.startDate),\n    },\n    {\n      title: \"Дата кінця\",\n      dataIndex: \"endDate\",\n      width: \"10%\",\n      editable: false,\n      sorter: (a: EventsItemType, b: EventsItemType) =>\n        sortDate(a.endDate, b.endDate),\n    },\n    columnOperation<EventsItemType>({\n      editingKey,\n      isEditing,\n      save,\n      cancel,\n      edit,\n      deleteItem,\n    }),\n  ];\n\n  const mergedColumns = columns.map((col) => {\n    if (\"editable\" in col) {\n      if (!col.editable) {\n        return col;\n      }\n    }\n    return {\n      ...col,\n      onCell: (record: EventsItemType) => ({\n        record,\n        inputType: col.dataIndex === \"date\" ? \"date\" : \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  return (\n    <Layout className=\"news-layout layout\">\n      <Title>Події</Title>\n      <Actions buttonName=\"+ Додати подію\" />\n\n      <Form form={form} component={false}>\n        <Table\n          components={{\n            body: {\n              cell: EditableCell,\n            },\n          }}\n          bordered\n          dataSource={data.items}\n          columns={mergedColumns}\n          rowClassName=\"editable-row\"\n          pagination={{\n            onChange: cancel,\n          }}\n          sticky={true}\n          loading={data.isLoading}\n        />\n      </Form>\n    </Layout>\n  );\n};\n\nexport default Events;\n\n//  type: i % 2 === 0 ? \"Семінар\" : \" Тренінг\",\n//     orientation: i % 2 === 0 ? \"Виховники\" : \"Міжнародники\",\n//     ageRestrictions: i % 2 === 0 ? \"Суменята\" : \"Дружинники\",\n\n// const range = (start: number, end: number) => {\n//   const result = [];\n//   for (let i = start; i < end; i++) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n// const disabledDate: RangePickerProps[\"disabledDate\"] = (current) => {\n//   return current && current < dayjs().endOf(\"day\");\n// };\n\n// const disabledDateTime = () => ({\n//   disabledHours: () => range(0, 24).splice(4, 20),\n//   disabledMinutes: () => range(30, 60),\n// });\n\n// •  Дата  - спочатку вибираєм місяць, тому що можуть не знати конкретний день, пізніше можна змінити дату початку події з числа по число ( 01.02.2023 - 02.02.2023)\n// •  Тип (семінар, тренінг, табір)  -  список\n// •  Назва  -  текст\n// •  Орієнтація (виховники, культутрники, ратники, міжнародники, суспільники)  -  список\n// •  Вікові обмеження (суменята, молодше юнацтво, старше юнацтво, дружинники)  -  список\n// •  Місце проведення (область, місто, адреса, назва бази)   -  текст\n// •  Фінансові особливості  -  текст\n","export const parseDate = (dateString: string): Date => {\n  const [day, month, rest] = dateString.split(\"-\");\n  const [year, time] = rest.split(\" \");\n  const [hours, minutes] = time.split(\":\");\n  return new Date(\n    parseInt(year),\n    parseInt(month) - 1,\n    parseInt(day),\n    parseInt(hours),\n    parseInt(minutes),\n  );\n};\n","import { parseDate } from \"./parseDate\";\n\nexport const sortDate = (aDate: string, bDate: string) => {\n  const dateA = parseDate(aDate);\n  const dateB = parseDate(bDate);\n  return dateA.getTime() - dateB.getTime();\n};\n"],"names":["_ref","buttonName","navigate","useNavigate","_jsx","_Fragment","children","Flex","justify","Button","type","className","size","onClick","onCreateNew","EditableCell","editing","dataIndex","title","inputType","record","index","restProps","inputNode","Input","Form","Item","name","style","margin","rules","required","message","concat","columnOperation","editingKey","isEditing","save","cancel","edit","deleteItem","editable","render","_","_jsxs","Typography","Link","id","marginRight","Popconfirm","onConfirm","disabled","props","form","useForm","setEditingKey","useState","data","useSelector","state","events","dispatch","useDispatch","useEffect","needUpdate","fetchEvents","setUpdate","mergedColumns","width","sorter","a","b","sortDate","startDate","endDate","async","row","validateFields","item","items","find","editEvent","errInfo","console","log","setFieldsValue","orientation","ageRestrictions","venue","financialFeatures","deleteEvent","map","col","onCell","Layout","Title","Actions","component","Table","components","body","cell","bordered","dataSource","columns","rowClassName","pagination","onChange","sticky","loading","isLoading","parseDate","dateString","day","month","rest","split","year","time","hours","minutes","Date","parseInt","aDate","bDate","dateA","dateB","getTime"],"sourceRoot":""}