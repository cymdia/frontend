{"version":3,"file":"static/js/297.93899317.chunk.js","mappings":"mKASA,MAqBA,EArBgBA,IAA4B,IAA3B,WAAEC,GAAmBD,EACpC,MAAME,GAAWC,EAAAA,EAAAA,MAIjB,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAACC,QAAQ,WAAUF,UACtBF,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CACLC,KAAK,UACLC,UAAU,iBACVC,KAAK,QACLC,QAVYC,KAClBZ,EAAS,OAAO,EASWI,SAEpBL,OAGJ,C,mHCNA,MAAMc,EAAef,IASC,IATI,QAC/BgB,EAAO,UACPC,EAAS,MACTC,EAAK,UACLC,EAAS,OACTC,EAAM,MACNC,EAAK,SACLf,KACGgB,GACkBtB,EACrB,MAAMuB,EAAYC,EAAaL,EAAWF,GAE1C,OACEb,EAAAA,EAAAA,KAAA,SAAQkB,EAAShB,SACdU,GACCZ,EAAAA,EAAAA,KAACqB,EAAAA,EAAKC,KAAI,CACRC,KAAMV,EACNW,MAAO,CAAEC,OAAQ,GACjBC,MAAO,CACL,CACEC,UAAU,EACVC,QAAQ,8CAADC,OAAaf,EAAK,OAE3BZ,SAEDiB,IAGHjB,GAEC,EAIHkB,EAAeA,CAACL,EAAsBQ,KAC1C,OAAQR,GACN,IAAK,OACH,OACEf,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CACTC,OAAO,OACPC,OAAQC,EAAAA,GACRC,SAAU,CACRC,qBAAqB,GAEvBC,aAAcA,EAAAA,KAGpB,IAAK,eACH,OAAOpC,EAAAA,EAAAA,KAACqC,EAAAA,EAAM,CAACC,QAASC,EAAiBhB,GAAOiB,YAAajB,IAE/D,QACE,OAAOvB,EAAAA,EAAAA,KAACyC,EAAAA,EAAK,IACjB,EAGIF,EAAoBhB,IACxB,OAAQA,GACN,IAAK,kBACH,OAAOmB,EAAAA,GACT,IAAK,cACH,OAAOC,EAAAA,GACT,QACE,OAAOC,EAAAA,GACX,C,mEC7DK,MAAMC,EAAkBjD,IAOsB,IAPG,WACtDkD,EAAU,UACVC,EAAS,KACTC,EAAI,OACJC,EAAM,KACNC,EAAI,WACJC,GACwBvD,EACxB,MAAO,CACLkB,MAAO,qBACPD,UAAW,YACXuC,UAAU,EACVC,OAAQA,CAACC,EAAGtC,KACV,MAAMoC,EAAWL,EAAU/B,GAC3B,OACEuC,EAAAA,EAAAA,MAAAtD,EAAAA,SAAA,CAAAC,SAAA,CACGkD,GACCG,EAAAA,EAAAA,MAAA,QAAArD,SAAA,EACEF,EAAAA,EAAAA,KAACwD,EAAAA,EAAWC,KAAI,CACdhD,QAASA,IAAMuC,EAAKhC,EAAO0C,IAC3BlC,MAAO,CAAEmC,YAAa,GAAIzD,SAC3B,sDAGDF,EAAAA,EAAAA,KAAC4D,EAAAA,EAAU,CACT9C,MAAM,2KACN+C,UAAWZ,EAAO/C,UAElBF,EAAAA,EAAAA,KAACwD,EAAAA,EAAWC,KAAI,CAACjC,MAAO,CAAEmC,YAAa,GAAIzD,SAAC,iEAMhDF,EAAAA,EAAAA,KAACwD,EAAAA,EAAWC,KAAI,CACdK,SAAyB,KAAfhB,EACVrC,QAASA,IAAMyC,EAAKlC,GACpBT,UAAU,WAAUL,SACrB,kEAIHF,EAAAA,EAAAA,KAACwD,EAAAA,EAAWC,KAAI,CACdK,SAAyB,KAAfhB,EACVrC,QAASA,IAAM0C,EAAWnC,GAC1BT,UAAU,aAAYL,SACvB,uDAGA,EAGR,C,kLCtDH,MA0HA,EA1Hc6D,IACZ,MAAOC,GAAQ3C,EAAAA,EAAK4C,WACbnB,EAAYoB,IAAiBC,EAAAA,EAAAA,UAAS,IACvCC,GAAOC,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMC,OAE/CC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KACJN,EAAKO,WACPH,GAASI,EAAAA,EAAAA,OAETJ,GAASK,EAAAA,EAAAA,IAAU,GACrB,GAEC,IAEH,MAAM9B,EAAa/B,GAAyBA,EAAO0C,KAAOZ,EAYpDG,EAASA,KACbiB,EAAc,GAAG,EAgDbY,EA9BU,CACd,CACEhE,MAAO,uCACPD,UAAW,OACXkE,MAAO,MACP3B,UAAU,GAEZ,CACEtC,MAAO,2BACPD,UAAW,cACXkE,MAAO,MACP3B,UAAU,GAEZ,CACEtC,MAAO,2BACPD,UAAW,OACXkE,MAAO,MACP3B,UAAU,EACV4B,OAAQA,CAACC,EAAiBC,KAAoBC,EAAAA,EAAAA,IAASF,EAAEG,KAAMF,EAAEE,QAEnEvC,EAAAA,EAAAA,GAA8B,CAC5BC,aACAC,YACAC,KAtCSqC,UACX,IACE,MAAMC,QAAatB,EAAKuB,iBAClBC,EAAOpB,EAAKqB,MAAMC,MAAMF,GAASA,EAAK9B,KAAOA,IACnDc,GAASmB,EAAAA,EAAAA,IAAQ,IAAKH,KAASF,EAAK5B,QACpCQ,EAAc,GAChB,CAAE,MAAO0B,GACPC,QAAQC,IAAI,mBAAoBF,EAClC,GA+BE3C,SACAC,KAtDUlC,IACZgD,EAAK+B,eAAe,CAClBxE,KAAM,GACNyE,YAAa,GACbZ,KAAM,MACHpE,IAELkD,EAAclD,EAAO0C,GAAa,EAgDhCP,WA9BgBnC,IAClBwD,GAASyB,EAAAA,EAAAA,IAAUjF,EAAO0C,IAAI,KAiCFwC,KAAKC,GAC7B,aAAcA,IACXA,EAAI/C,SACA+C,EAGJ,IACFA,EACHC,OAASpF,IAAoB,CAC3BA,SACAD,UAA6B,SAAlBoF,EAAItF,UAAuB,OAAS,OAC/CA,UAAWsF,EAAItF,UACfC,MAAOqF,EAAIrF,MACXF,QAASmC,EAAU/B,QAKzB,OACEuC,EAAAA,EAAAA,MAAC8C,EAAAA,EAAM,CAAC9F,UAAU,qBAAoBL,SAAA,EACpCF,EAAAA,EAAAA,KAACsG,EAAAA,EAAK,CAAApG,SAAC,0CACPF,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAAC1G,WAAW,iFAEpBG,EAAAA,EAAAA,KAACqB,EAAAA,EAAI,CAAC2C,KAAMA,EAAMwC,WAAW,EAAMtG,UACjCF,EAAAA,EAAAA,KAACyG,EAAAA,EAAK,CACJC,WAAY,CACVC,KAAM,CACJC,KAAMjG,EAAAA,IAGVkG,UAAQ,EACRC,WAAY1C,EAAKqB,MACjBsB,QAASjC,EACTkC,aAAa,eACbC,WAAY,CACVC,SAAUjE,GAEZkE,QAAQ,EACRC,QAAShD,EAAKiD,gBAGX,C,8DC1IN,MAAMC,EAAaC,IACxB,MAAOC,EAAKC,EAAOC,GAAQH,EAAWI,MAAM,MACrCC,EAAMC,GAAQH,EAAKC,MAAM,MACzBG,EAAOC,GAAWF,EAAKF,MAAM,KACpC,OAAO,IAAIK,KACTC,SAASL,GACTK,SAASR,GAAS,EAClBQ,SAAST,GACTS,SAASH,GACTG,SAASF,GACV,ECRU5C,EAAWA,CAAC+C,EAAeC,KACtC,MAAMC,EAAQd,EAAUY,GAClBG,EAAQf,EAAUa,GACxB,OAAOC,EAAME,UAAYD,EAAMC,SAAS,E,uBCF1C,MASalG,EAAkDmG,GAEtDA,GAAWA,EAAUC,MAAQC,MAAM,OCZ/BC,EAAoBtD,IAC/B,IAAKA,EACH,OAAOoD,MAET,MAAMG,EAAQvD,EAAKuC,MAAM,KACnBiB,EAAYD,EAAM,GAAGhB,MAAM,KAC3BkB,EAAYF,EAAM,GAAGhB,MAAM,KAC3BmB,EAAS,GAAAjH,OAAM+G,EAAU,GAAE,KAAA/G,OAAI+G,EAAU,GAAE,KAAA/G,OAAI+G,EAAU,GAAE,KAAA/G,OAAIgH,EAAU,GAAE,KAAAhH,OAAIgH,EAAU,GAAE,WAEjG,OAAOL,IAAM,IAAIR,KAAKc,GAAW,ECTtBC,EAAsBxH,IACjC,OAAQA,GACN,IAAK,YACL,IAAK,UACH,MAAO,OACT,IAAK,kBACL,IAAK,cACL,IAAK,OACH,MAAO,eACT,QACE,MAAO,OACX,C","sources":["components/Actions.tsx","components/EditableCell.tsx","components/columnOperation.tsx","pages/News/News.tsx","utils/helpers/parseDate.ts","utils/helpers/sortDate.ts","utils/helpers/disabledDate.ts","utils/helpers/parsedDateToEdit.ts","utils/helpers/getInputTypeByName.ts"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\nimport { Button, Flex } from \"antd\";\n\nimport \"../styles/components/_actions.scss\";\n\ntype Props = {\n  buttonName: string;\n};\n\nconst Actions = ({ buttonName }: Props) => {\n  const navigate = useNavigate();\n  const onCreateNew = () => {\n    navigate(\"edit\");\n  };\n  return (\n    <>\n      <Flex justify=\"flex-end\">\n        <Button\n          type=\"primary\"\n          className=\"create-new-btn\"\n          size=\"large\"\n          onClick={onCreateNew}\n        >\n          {buttonName}\n        </Button>\n      </Flex>\n    </>\n  );\n};\n\nexport default Actions;\n","import { DatePicker, Form, Input, Select } from \"antd\";\nimport { InputType } from \"types/editInput\";\nimport { dateFormat } from \"utils/constants/constants\";\nimport {\n  ageRestrictionsItems,\n  orientationItems,\n  typeItems,\n} from \"utils/constants/eventsDropdownData\";\nimport { disabledDate } from \"utils/helpers\";\n\ninterface EditableCellProps<T> extends React.HTMLAttributes<HTMLElement> {\n  editing: boolean;\n  dataIndex: string;\n  title: any;\n  inputType: InputType;\n  record: T;\n  index: number;\n  children: React.ReactNode;\n}\n\nexport const EditableCell = <T,>({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}: EditableCellProps<T>) => {\n  const inputNode = getInputNode(inputType, dataIndex);\n\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Введіть ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nconst getInputNode = (inputType: InputType, name: string) => {\n  switch (inputType) {\n    case \"date\":\n      return (\n        <DatePicker\n          picker=\"date\"\n          format={dateFormat}\n          showTime={{\n            hideDisabledOptions: true,\n          }}\n          disabledDate={disabledDate}\n        />\n      );\n    case \"dropdownlist\":\n      return <Select options={getOptionsByName(name)} placeholder={name} />;\n\n    default:\n      return <Input />;\n  }\n};\n\nconst getOptionsByName = (name: string) => {\n  switch (name) {\n    case \"ageRestrictions\":\n      return ageRestrictionsItems;\n    case \"orientation\":\n      return orientationItems;\n    default:\n      return typeItems;\n  }\n};\n","import { Popconfirm, Typography } from \"antd\";\n\ninterface EntityWithId {\n  id: string;\n}\n\nexport interface ColumnOperationT<T> {\n  title: string;\n  dataIndex: string;\n  editable: boolean;\n  render: (_: any, record: T) => JSX.Element;\n}\n\ninterface ColumnOperationProps<T> {\n  editingKey: string;\n  isEditing: (record: T) => boolean;\n  save: (id: string) => Promise<void>;\n  cancel: () => void;\n  edit: (record: Partial<T>) => void;\n  deleteItem: (record: T) => void;\n}\n\nexport const columnOperation = <T extends EntityWithId>({\n  editingKey,\n  isEditing,\n  save,\n  cancel,\n  edit,\n  deleteItem,\n}: ColumnOperationProps<T>): ColumnOperationT<T> => {\n  return {\n    title: \"Дії\",\n    dataIndex: \"operation\",\n    editable: false,\n    render: (_, record): JSX.Element => {\n      const editable = isEditing(record);\n      return (\n        <>\n          {editable ? (\n            <span>\n              <Typography.Link\n                onClick={() => save(record.id)}\n                style={{ marginRight: 8 }}\n              >\n                Зберегти\n              </Typography.Link>\n              <Popconfirm\n                title=\"Ви впевнені, що хочете скасувати?\"\n                onConfirm={cancel}\n              >\n                <Typography.Link style={{ marginRight: 8 }}>\n                  Скасувати\n                </Typography.Link>\n              </Popconfirm>\n            </span>\n          ) : (\n            <Typography.Link\n              disabled={editingKey !== \"\"}\n              onClick={() => edit(record)}\n              className=\"edit-btn\"\n            >\n              Редагувати\n            </Typography.Link>\n          )}\n          <Typography.Link\n            disabled={editingKey !== \"\"}\n            onClick={() => deleteItem(record)}\n            className=\"delete-btn\"\n          >\n            Видалити\n          </Typography.Link>\n        </>\n      );\n    },\n  };\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { Form, Layout, Table } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Title from \"antd/es/typography/Title\";\n\nimport { sortDate } from \"../../utils/helpers\";\nimport { NewsItemType } from \"../../types/newsItem\";\nimport { AppDispatch, RootState } from \"../../state/store\";\nimport { setUpdate } from \"../../state/news/newsSlice\";\nimport { deleteNew, editNew, fetchNews } from \"state/news/newsOperations\";\n\nimport Actions from \"components/Actions\";\nimport { columnOperation } from \"components/columnOperation\";\nimport { EditableCell } from \"components/EditableCell\";\n\nimport \"./styles/_news.scss\";\n\ntype Props = {};\n\nconst News = (props: Props) => {\n  const [form] = Form.useForm();\n  const [editingKey, setEditingKey] = useState(\"\");\n  const data = useSelector((state: RootState) => state.news);\n\n  const dispatch = useDispatch<AppDispatch>();\n\n  useEffect(() => {\n    if (data.needUpdate) {\n      dispatch(fetchNews());\n    } else {\n      dispatch(setUpdate(true));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isEditing = (record: NewsItemType) => record.id === editingKey;\n\n  const edit = (record: Partial<NewsItemType>) => {\n    form.setFieldsValue({\n      name: \"\",\n      description: \"\",\n      date: \"\",\n      ...record,\n    });\n    setEditingKey(record.id as string);\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  };\n\n  const save = async (id: string) => {\n    try {\n      const row = (await form.validateFields()) as NewsItemType;\n      const item = data.items.find((item) => item.id === id);\n      dispatch(editNew({ ...item, ...row, id }));\n      setEditingKey(\"\");\n    } catch (errInfo) {\n      console.log(\"Validate Failed:\", errInfo);\n    }\n  };\n\n  const deleteItem = (record: NewsItemType) => {\n    dispatch(deleteNew(record.id));\n  };\n\n  const columns = [\n    {\n      title: \"Новина\",\n      dataIndex: \"name\",\n      width: \"25%\",\n      editable: true,\n    },\n    {\n      title: \"Опис\",\n      dataIndex: \"description\",\n      width: \"35%\",\n      editable: true,\n    },\n    {\n      title: \"Дата\",\n      dataIndex: \"date\",\n      width: \"20%\",\n      editable: false,\n      sorter: (a: NewsItemType, b: NewsItemType) => sortDate(a.date, b.date),\n    },\n    columnOperation<NewsItemType>({\n      editingKey,\n      isEditing,\n      save,\n      cancel,\n      edit,\n      deleteItem,\n    }),\n  ];\n\n  const mergedColumns = columns.map((col) => {\n    if (\"editable\" in col) {\n      if (!col.editable) {\n        return col;\n      }\n    }\n    return {\n      ...col,\n      onCell: (record: NewsItemType) => ({\n        record,\n        inputType: col.dataIndex === \"date\" ? \"date\" : \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  return (\n    <Layout className=\"news-layout layout\">\n      <Title>Новини</Title>\n      <Actions buttonName=\"+ Додати новину\" />\n\n      <Form form={form} component={false}>\n        <Table\n          components={{\n            body: {\n              cell: EditableCell<NewsItemType>,\n            },\n          }}\n          bordered\n          dataSource={data.items}\n          columns={mergedColumns}\n          rowClassName=\"editable-row\"\n          pagination={{\n            onChange: cancel,\n          }}\n          sticky={true}\n          loading={data.isLoading}\n        />\n      </Form>\n    </Layout>\n  );\n};\n\nexport default News;\n","export const parseDate = (dateString: string): Date => {\n  const [day, month, rest] = dateString.split(\"-\");\n  const [year, time] = rest.split(\" \");\n  const [hours, minutes] = time.split(\":\");\n  return new Date(\n    parseInt(year),\n    parseInt(month) - 1,\n    parseInt(day),\n    parseInt(hours),\n    parseInt(minutes),\n  );\n};\n","import { parseDate } from \"./parseDate\";\n\nexport const sortDate = (aDate: string, bDate: string) => {\n  const dateA = parseDate(aDate);\n  const dateB = parseDate(bDate);\n  return dateA.getTime() - dateB.getTime();\n};\n","import { RangePickerProps } from \"antd/es/date-picker\";\nimport dayjs from \"dayjs\";\n\nconst range = (start: number, end: number) => {\n  const result = [];\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n// eslint-disable-next-line arrow-body-style\nexport const disabledDate: RangePickerProps[\"disabledDate\"] = (current) => {\n  // Can not select days before today and today\n  return current && current < dayjs().endOf(\"day\");\n};\n\nexport const disabledDateTime = () => ({\n  disabledHours: () => range(0, 24).splice(4, 20),\n  disabledMinutes: () => range(30, 60),\n  disabledSeconds: () => [55, 56],\n});\n\nexport const disabledRangeTime: RangePickerProps[\"disabledTime\"] = (\n  _,\n  type,\n) => {\n  if (type === \"start\") {\n    return {\n      disabledHours: () => range(0, 60).splice(4, 20),\n      disabledMinutes: () => range(30, 60),\n      disabledSeconds: () => [55, 56],\n    };\n  }\n  return {\n    disabledHours: () => range(0, 60).splice(20, 4),\n    disabledMinutes: () => range(0, 31),\n    disabledSeconds: () => [55, 56],\n  };\n};\n","import dayjs from \"dayjs\";\n\nexport const parsedDateToEdit = (date?: string) => {\n  if (!date) {\n    return dayjs();\n  }\n  const parts = date.split(\" \");\n  const dateParts = parts[0].split(\"-\");\n  const timeParts = parts[1].split(\":\");\n  const isoString = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}T${timeParts[0]}:${timeParts[1]}:00.000`;\n\n  return dayjs(new Date(isoString));\n};\n","import { InputType } from \"types/editInput\";\n\nexport const getInputTypeByName = (name: string): InputType => {\n  switch (name) {\n    case \"startDate\":\n    case \"endDate\":\n      return \"date\";\n    case \"ageRestrictions\":\n    case \"orientation\":\n    case \"type\":\n      return \"dropdownlist\";\n    default:\n      return \"text\";\n  }\n};\n"],"names":["_ref","buttonName","navigate","useNavigate","_jsx","_Fragment","children","Flex","justify","Button","type","className","size","onClick","onCreateNew","EditableCell","editing","dataIndex","title","inputType","record","index","restProps","inputNode","getInputNode","Form","Item","name","style","margin","rules","required","message","concat","DatePicker","picker","format","dateFormat","showTime","hideDisabledOptions","disabledDate","Select","options","getOptionsByName","placeholder","Input","ageRestrictionsItems","orientationItems","typeItems","columnOperation","editingKey","isEditing","save","cancel","edit","deleteItem","editable","render","_","_jsxs","Typography","Link","id","marginRight","Popconfirm","onConfirm","disabled","props","form","useForm","setEditingKey","useState","data","useSelector","state","news","dispatch","useDispatch","useEffect","needUpdate","fetchNews","setUpdate","mergedColumns","width","sorter","a","b","sortDate","date","async","row","validateFields","item","items","find","editNew","errInfo","console","log","setFieldsValue","description","deleteNew","map","col","onCell","Layout","Title","Actions","component","Table","components","body","cell","bordered","dataSource","columns","rowClassName","pagination","onChange","sticky","loading","isLoading","parseDate","dateString","day","month","rest","split","year","time","hours","minutes","Date","parseInt","aDate","bDate","dateA","dateB","getTime","current","dayjs","endOf","parsedDateToEdit","parts","dateParts","timeParts","isoString","getInputTypeByName"],"sourceRoot":""}