{"version":3,"file":"static/js/297.192bbc0b.chunk.js","mappings":"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","sources":["components/Actions.tsx","components/EditableCell.tsx","components/columnOperation.tsx","pages/News/News.tsx","utils/helpers/parseDate.ts","utils/helpers/sortDate.ts"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\nimport { Button, Flex } from \"antd\";\n\nimport \"../styles/components/_actions.scss\";\n\ntype Props = {\n  buttonName: string;\n};\n\nconst Actions = ({ buttonName }: Props) => {\n  const navigate = useNavigate();\n  const onCreateNew = () => {\n    navigate(\"edit\");\n  };\n  return (\n    <>\n      <Flex justify=\"flex-end\">\n        <Button\n          type=\"primary\"\n          className=\"create-new-btn\"\n          size=\"large\"\n          onClick={onCreateNew}\n        >\n          {buttonName}\n        </Button>\n      </Flex>\n    </>\n  );\n};\n\nexport default Actions;\n","import { Form, Input } from \"antd\";\nimport { NewsItemType } from \"types/newsItem\";\n\ninterface EditableCellProps<T> extends React.HTMLAttributes<HTMLElement> {\n  editing: boolean;\n  dataIndex: string;\n  title: any;\n  inputType: \"date\" | \"text\";\n  record: T;\n  index: number;\n  children: React.ReactNode;\n}\n\nexport const EditableCell: React.FC<EditableCellProps<NewsItemType>> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = <Input />;\n\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Введіть ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n","import { Popconfirm, Typography } from \"antd\";\n\ninterface EntityWithId {\n  id: string;\n}\n\nexport interface ColumnOperationT<T> {\n  title: string;\n  dataIndex: string;\n  editable: boolean;\n  render: (_: any, record: T) => JSX.Element;\n}\n\ninterface ColumnOperationProps<T> {\n  editingKey: string;\n  isEditing: (record: T) => boolean;\n  save: (id: string) => Promise<void>;\n  cancel: () => void;\n  edit: (record: Partial<T>) => void;\n  deleteItem: (record: T) => void;\n}\n\nexport const columnOperation = <T extends EntityWithId>({\n  editingKey,\n  isEditing,\n  save,\n  cancel,\n  edit,\n  deleteItem,\n}: ColumnOperationProps<T>): ColumnOperationT<T> => {\n  return {\n    title: \"Дії\",\n    dataIndex: \"operation\",\n    editable: false,\n    render: (_, record): JSX.Element => {\n      const editable = isEditing(record);\n      return (\n        <>\n          {editable ? (\n            <span>\n              <Typography.Link\n                onClick={() => save(record.id)}\n                style={{ marginRight: 8 }}\n              >\n                Зберегти\n              </Typography.Link>\n              <Popconfirm\n                title=\"Ви впевнені, що хочете скасувати?\"\n                onConfirm={cancel}\n              >\n                <Typography.Link style={{ marginRight: 8 }}>\n                  Скасувати\n                </Typography.Link>\n              </Popconfirm>\n            </span>\n          ) : (\n            <Typography.Link\n              disabled={editingKey !== \"\"}\n              onClick={() => edit(record)}\n              className=\"edit-btn\"\n            >\n              Редагувати\n            </Typography.Link>\n          )}\n          <Typography.Link\n            disabled={editingKey !== \"\"}\n            onClick={() => deleteItem(record)}\n            className=\"delete-btn\"\n          >\n            Видалити\n          </Typography.Link>\n        </>\n      );\n    },\n  };\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { Form, Layout, Table } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Title from \"antd/es/typography/Title\";\n\nimport { sortDate } from \"../../utils/helpers\";\nimport { NewsItemType } from \"../../types/newsItem\";\nimport { AppDispatch, RootState } from \"../../state/store\";\nimport { setUpdate } from \"../../state/news/newsSlice\";\nimport { deleteNew, editNew, fetchNews } from \"state/news/newsOperations\";\n\nimport Actions from \"components/Actions\";\nimport { columnOperation } from \"components/columnOperation\";\nimport { EditableCell } from \"components/EditableCell\";\n\nimport \"./styles/_news.scss\";\n\ntype Props = {};\n\nconst News = (props: Props) => {\n  const [form] = Form.useForm();\n  const [editingKey, setEditingKey] = useState(\"\");\n  const data = useSelector((state: RootState) => state.news);\n\n  const dispatch = useDispatch<AppDispatch>();\n\n  useEffect(() => {\n    if (data.needUpdate) {\n      dispatch(fetchNews());\n    } else {\n      dispatch(setUpdate(true));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isEditing = (record: NewsItemType) => record.id === editingKey;\n\n  const edit = (record: Partial<NewsItemType>) => {\n    form.setFieldsValue({\n      name: \"\",\n      description: \"\",\n      date: \"\",\n      ...record,\n    });\n    setEditingKey(record.id as string);\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  };\n\n  const save = async (id: string) => {\n    try {\n      const row = (await form.validateFields()) as NewsItemType;\n      const item = data.items.find((item) => item.id === id);\n      dispatch(editNew({ ...item, ...row, id }));\n      setEditingKey(\"\");\n    } catch (errInfo) {\n      console.log(\"Validate Failed:\", errInfo);\n    }\n  };\n\n  const deleteItem = (record: NewsItemType) => {\n    dispatch(deleteNew(record.id));\n  };\n\n  const columns = [\n    {\n      title: \"Новина\",\n      dataIndex: \"name\",\n      width: \"25%\",\n      editable: true,\n    },\n    {\n      title: \"Опис\",\n      dataIndex: \"description\",\n      width: \"35%\",\n      editable: true,\n    },\n    {\n      title: \"Дата\",\n      dataIndex: \"date\",\n      width: \"20%\",\n      editable: false,\n      sorter: (a: NewsItemType, b: NewsItemType) => sortDate(a.date, b.date),\n    },\n    columnOperation<NewsItemType>({\n      editingKey,\n      isEditing,\n      save,\n      cancel,\n      edit,\n      deleteItem,\n    }),\n  ];\n\n  const mergedColumns = columns.map((col) => {\n    if (\"editable\" in col) {\n      if (!col.editable) {\n        return col;\n      }\n    }\n    return {\n      ...col,\n      onCell: (record: NewsItemType) => ({\n        record,\n        inputType: col.dataIndex === \"date\" ? \"date\" : \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  return (\n    <Layout className=\"news-layout layout\">\n      <Title>Новини</Title>\n      <Actions buttonName=\"+ Додати новину\" />\n\n      <Form form={form} component={false}>\n        <Table\n          components={{\n            body: {\n              cell: EditableCell,\n            },\n          }}\n          bordered\n          dataSource={data.items}\n          columns={mergedColumns}\n          rowClassName=\"editable-row\"\n          pagination={{\n            onChange: cancel,\n          }}\n          sticky={true}\n          loading={data.isLoading}\n        />\n      </Form>\n    </Layout>\n  );\n};\n\nexport default News;\n","export const parseDate = (dateString: string): Date => {\n  const [day, month, rest] = dateString.split(\"-\");\n  const [year, time] = rest.split(\" \");\n  const [hours, minutes] = time.split(\":\");\n  return new Date(\n    parseInt(year),\n    parseInt(month) - 1,\n    parseInt(day),\n    parseInt(hours),\n    parseInt(minutes),\n  );\n};\n","import { parseDate } from \"./parseDate\";\n\nexport const sortDate = (aDate: string, bDate: string) => {\n  const dateA = parseDate(aDate);\n  const dateB = parseDate(bDate);\n  return dateA.getTime() - dateB.getTime();\n};\n"],"names":["_ref","buttonName","navigate","useNavigate","_jsx","_Fragment","children","Flex","justify","Button","type","className","size","onClick","onCreateNew","EditableCell","editing","dataIndex","title","inputType","record","index","restProps","inputNode","Input","Form","Item","name","style","margin","rules","required","message","concat","columnOperation","editingKey","isEditing","save","cancel","edit","deleteItem","editable","render","_","_jsxs","Typography","Link","id","marginRight","Popconfirm","onConfirm","disabled","props","form","useForm","setEditingKey","useState","data","useSelector","state","news","dispatch","useDispatch","useEffect","needUpdate","fetchNews","setUpdate","mergedColumns","width","sorter","a","b","sortDate","date","async","row","validateFields","item","items","find","editNew","errInfo","console","log","setFieldsValue","description","deleteNew","map","col","onCell","Layout","Title","Actions","component","Table","components","body","cell","bordered","dataSource","columns","rowClassName","pagination","onChange","sticky","loading","isLoading","parseDate","dateString","day","month","rest","split","year","time","hours","minutes","Date","parseInt","aDate","bDate","dateA","dateB","getTime"],"sourceRoot":""}