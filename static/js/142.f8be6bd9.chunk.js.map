{"version":3,"file":"static/js/142.f8be6bd9.chunk.js","mappings":"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","sources":["components/Actions.tsx","utils/helpers/parseDate.ts","webpack://frontend/./src/pages/News/styles/_news.scss?406f","pages/News/News.tsx","utils/helpers/sortDate.ts"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\nimport { Button, Flex } from \"antd\";\n\nimport \"../styles/components/_actions.scss\";\n\ntype Props = {\n  buttonName: string;\n};\n\nconst Actions = ({ buttonName }: Props) => {\n  const navigate = useNavigate();\n  const onCreateNew = () => {\n    navigate(\"edit\");\n  };\n  return (\n    <>\n      <Flex justify=\"flex-end\">\n        <Button\n          type=\"primary\"\n          className=\"create-new-btn\"\n          size=\"large\"\n          onClick={onCreateNew}\n        >\n          {buttonName}\n        </Button>\n      </Flex>\n    </>\n  );\n};\n\nexport default Actions;\n","export const parseDate = (dateString: string): Date => {\n  const [day, month, rest] = dateString.split(\"-\");\n  const [year, time] = rest.split(\" \");\n  const [hours, minutes] = time.split(\":\");\n  return new Date(\n    parseInt(year),\n    parseInt(month) - 1,\n    parseInt(day),\n    parseInt(hours),\n    parseInt(minutes),\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryColor\":\"#1c4792\",\"accentColor\":\"#39b54a\",\"accentWhiteColor\":\"rgba(57,181,74,.4196078431)\",\"whiteColor\":\"#fff\",\"blueDarkColor\":\"#0c2749\",\"greyDarkColor\":\"#6e7074\",\"redColor\":\"#ff2020\",\"redWhiteColor\":\"#ff9898\",\"darkColor\":\"rgba(38,50,56,.0588235294)\",\"lightDarkColor\":\"rgba(38,50,56,.0588235294)\",\"primaryBackgroundColor\":\"#f0f0f0\",\"fontFamily\":\"\\\"Rubik\\\",sans-serif\",\"secondaryFontFamily\":\"\\\"Montserrat\\\",sans-serif\"};","import React, { useEffect, useState } from \"react\";\n\nimport { Form, Input, Layout, Popconfirm, Table, Typography } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Title from \"antd/es/typography/Title\";\nimport Actions from \"../../components/Actions\";\n\nimport { sortDate } from \"../../utils/helpers\";\n\nimport { NewsItemType } from \"../../types/newsItem\";\nimport { AppDispatch, RootState } from \"../../state/store\";\nimport { setUpdate } from \"../../state/news/newsSlice\";\nimport { deleteNew, editNew, fetchNews } from \"state/news/newsOperations\";\n\nimport \"./styles/_news.scss\";\n\ntype Props = {};\n\n//  type: i % 2 === 0 ? \"Семінар\" : \" Тренінг\",\n//     orientation: i % 2 === 0 ? \"Виховники\" : \"Міжнародники\",\n//     ageRestrictions: i % 2 === 0 ? \"Суменята\" : \"Дружинники\",\n\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\n  editing: boolean;\n  dataIndex: string;\n  title: any;\n  inputType: \"date\" | \"text\";\n  record: NewsItemType;\n  index: number;\n  children: React.ReactNode;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = <Input />;\n\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Введіть ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nconst News = (props: Props) => {\n  const [form] = Form.useForm();\n  const [editingKey, setEditingKey] = useState(\"\");\n  const data = useSelector((state: RootState) => state.news);\n\n  const dispatch = useDispatch<AppDispatch>();\n\n  useEffect(() => {\n    if (data.needUpdate) {\n      dispatch(fetchNews());\n    } else {\n      dispatch(setUpdate(true));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isEditing = (record: NewsItemType) => record.id === editingKey;\n\n  const edit = (record: Partial<NewsItemType>) => {\n    form.setFieldsValue({\n      name: \"\",\n      description: \"\",\n      date: \"\",\n      ...record,\n    });\n    setEditingKey(record.id as string);\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  };\n\n  const save = async (id: string) => {\n    try {\n      const row = (await form.validateFields()) as NewsItemType;\n      const item = data.items.find((item) => item.id === id);\n      dispatch(editNew({ ...item, ...row, id }));\n      setEditingKey(\"\");\n    } catch (errInfo) {\n      console.log(\"Validate Failed:\", errInfo);\n    }\n  };\n\n  const deleteItem = (record: NewsItemType) => {\n    dispatch(deleteNew(record.id));\n  };\n\n  const columns = [\n    {\n      title: \"Новина\",\n      dataIndex: \"name\",\n      width: \"25%\",\n      editable: true,\n    },\n    {\n      title: \"Опис\",\n      dataIndex: \"description\",\n      width: \"35%\",\n      editable: true,\n    },\n    {\n      title: \"Дата\",\n      dataIndex: \"date\",\n      width: \"20%\",\n      editable: false,\n      sorter: (a: NewsItemType, b: NewsItemType) => sortDate(a.date, b.date),\n    },\n    {\n      title: \"Дії\",\n      dataIndex: \"operation\",\n      render: (_: any, record: NewsItemType) => {\n        const editable = isEditing(record);\n        return (\n          <>\n            {editable ? (\n              <span>\n                <Typography.Link\n                  onClick={() => save(record.id)}\n                  style={{ marginRight: 8 }}\n                >\n                  Зберегти\n                </Typography.Link>\n                <Popconfirm\n                  title=\"Ви впевнені, що хочете скасувати?\"\n                  onConfirm={cancel}\n                >\n                  <Typography.Link style={{ marginRight: 8 }}>\n                    Скасувати\n                  </Typography.Link>\n                </Popconfirm>\n              </span>\n            ) : (\n              <Typography.Link\n                disabled={editingKey !== \"\"}\n                onClick={() => edit(record)}\n                className=\"edit-btn\"\n              >\n                Редагувати\n              </Typography.Link>\n            )}\n            <Typography.Link\n              disabled={editingKey !== \"\"}\n              onClick={() => deleteItem(record)}\n              className=\"delete-btn\"\n            >\n              Видалити\n            </Typography.Link>\n          </>\n        );\n      },\n    },\n  ];\n\n  const mergedColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n    return {\n      ...col,\n      onCell: (record: NewsItemType) => ({\n        record,\n        inputType: col.dataIndex === \"date\" ? \"date\" : \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  return (\n    <Layout className=\"news-layout layout\">\n      <Title>Новини</Title>\n      <Actions buttonName=\"+ Додати новину\" />\n\n      <Form form={form} component={false}>\n        <Table\n          components={{\n            body: {\n              cell: EditableCell,\n            },\n          }}\n          bordered\n          dataSource={data.items}\n          columns={mergedColumns}\n          rowClassName=\"editable-row\"\n          pagination={{\n            onChange: cancel,\n          }}\n          sticky={true}\n          loading={data.isLoading}\n        />\n      </Form>\n    </Layout>\n  );\n};\n\nexport default News;\n\n// const range = (start: number, end: number) => {\n//   const result = [];\n//   for (let i = start; i < end; i++) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n// const disabledDate: RangePickerProps[\"disabledDate\"] = (current) => {\n//   return current && current < dayjs().endOf(\"day\");\n// };\n\n// const disabledDateTime = () => ({\n//   disabledHours: () => range(0, 24).splice(4, 20),\n//   disabledMinutes: () => range(30, 60),\n// });\n","import { parseDate } from \"./parseDate\";\n\nexport const sortDate = (aDate: string, bDate: string) => {\n  const dateA = parseDate(aDate);\n  const dateB = parseDate(bDate);\n  return dateA.getTime() - dateB.getTime();\n};\n"],"names":["_ref","buttonName","navigate","useNavigate","_jsx","_Fragment","children","Flex","justify","Button","type","className","size","onClick","onCreateNew","parseDate","dateString","day","month","rest","split","year","time","hours","minutes","Date","parseInt","EditableCell","editing","dataIndex","title","inputType","record","index","restProps","inputNode","Input","Form","Item","name","style","margin","rules","required","message","concat","props","form","useForm","editingKey","setEditingKey","useState","data","useSelector","state","news","dispatch","useDispatch","useEffect","needUpdate","fetchNews","setUpdate","isEditing","id","cancel","mergedColumns","width","editable","sorter","a","b","sortDate","aDate","bDate","dateA","dateB","getTime","date","render","_","_jsxs","Typography","Link","async","row","validateFields","item","items","find","editNew","errInfo","console","log","save","marginRight","Popconfirm","onConfirm","disabled","setFieldsValue","description","edit","deleteNew","deleteItem","map","col","onCell","Layout","Title","Actions","component","Table","components","body","cell","bordered","dataSource","columns","rowClassName","pagination","onChange","sticky","loading","isLoading"],"sourceRoot":""}